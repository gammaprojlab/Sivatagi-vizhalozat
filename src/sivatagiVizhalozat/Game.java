package sivatagiVizhalozat;
//
//
//  Generated by StarUML(tm) Java Add-In
//
//  @ Project : Untitled
//  @ File Name : Game.java
//  @ Date : 03/04/2023
//  @ Author : 
//
//

import java.io.Serializable;
import java.util.ArrayList;

/** 
 * The class that implements the Game functionality.
 * It stores and controls the mechanics, saboteurs and field elements present on the Playground.
 * Scores during the game are also credited to the teams by this department.
 * */
public class Game implements Serializable{
	
	/**
	 * Saboteurs' points, as many spilled into the desert.
	 * */
	private int spilledWater;

	/**
	 * Points of the Plumbers.
	 *  */
	private int collectedWater;

	/**
	 * The mode of the current Game.
	 * If the value is -1, then the game will take all random values to be truly random.
	 * If the value is 0, then the game will take all random values to be 0.
	 * If the value is 1, then the game will take all random values to be 1.
	 *  */
	private int tester;
	

	private int[] classIdArray;

	/**
	 * Saboteurs who play the game.
	 *  */
	private ArrayList<Saboteur> saboteurs;

	/**
	 * Plumbers who play the game.
	 *  */
	private ArrayList<Plumber> plumbers;
	
	private Map map = new Map();
	
	/////////////////////////////////////////////////////////////
	/**
	 * Fields of the map.
	 *  */
	private ArrayList<Steppable> steppable;
	//////////////////////////////////////////////////////////////
	

	public Map getMap()
	{
		return map;
	}

	/**
	 * sets the Point of the Saboteurs.
	 * @param s Points to what the Saboteurs point will be set.
	 *  */
	public void setspilledWater(int s) {
		spilledWater = s;
	}
	
	/**
	 * Gets the points of the Saboteurs.
	 * @return spilledWater Points of the Saboteurs.
	 *  */
	public int getSpilledWater() {
		return spilledWater;
	}
	
	/**
	 * sets the Point of the Plumbers.
	 * @param c Points to what the Plumbers point will be set.
	 *  */
	public void setCollectedWater(int c) {
		collectedWater = c;
	}
	
	/**
	 * Gets the points of the Plumbers.
	 * @return collectedWater Points of the Plumbers.
	 *  */
	public int getCollectedWater() {
		return collectedWater;
	}
	
	/**
	 * Adds a Saboteur to the game.
	 * @param s Saboteur who will be playing.
	 *  */
	public void addSaboteur(Saboteur s) {
		saboteurs.add(s);
	}
	
	/**
	 * Gets the Saboteurs who play the game.
	 * @return saboteurs Saboteurs who play.
	 *  */
	public ArrayList<Saboteur> getSaboteurs() {
		return saboteurs;
	}


	/** 
	 * Adds a Plumber to the game.
	 * @param p Plumber who will be playing.
	 * */
	public void addPlumber(Plumber p) {
		plumbers.add(p);
	}
	
	/**
	 * Gets the Plumbers who play the game.
	 * @return plumbers Plumbers who play.
	 *  */
	public ArrayList<Plumber> getPlumbers() {
		return plumbers;
	}
	
	/**
	 * Adds to the Fields.
	 * @param s New tiel to the map.
	 *  */
	public void addSteppable(Steppable s) {
		steppable.add(s);
	}
	
	/**
	 * Gets the fields of the map.
	 * @return steppable Fields of the map.
	 *  */
	public ArrayList<Steppable> getSteppable() {
		return steppable;
	}
	
	/**
	 * Konstruktor of the Game class.
	 *  */
	public Game() {
		spilledWater = 0;
		collectedWater = 0;
		saboteurs = new ArrayList<Saboteur>();
		plumbers = new ArrayList<Plumber>();
		steppable = new ArrayList<Steppable>();
	}
	
	/**
	 * Imitates the flow of the water.
	 *  */
	public void Tick() {
		for(Steppable step: steppable) {
			step.Step1();
		}
		for(Steppable step: steppable) {
			step.Step2();
		}
	}
	
	/**
	 * Adds points to the Saboteurs.
	 * @param water The points what will be added.
	 *  */
	public void addWaterSpilled(int water) {
		spilledWater += water;
	}
	
	/**
	 * Adds points to the Plumbers.
	 * @param water The points what will be added.
	 *  */
	public void addWaterCollected(int water) {
		collectedWater += water;
	}
	
	/**
	* Used for testing
	*/
	public String toString() {
		return"Todo";
	}

	public double getRandom() {
		switch(tester) {
			case -1:
				return Math.random();
		case 0:
				return 0;
			case 1:
				return 1;
		}
		return Math.random();
	}

	public void setIdArray(int[] array) {
		classIdArray = array;
	}

	public int[] getIdArray() {
		return classIdArray;
	}
}
